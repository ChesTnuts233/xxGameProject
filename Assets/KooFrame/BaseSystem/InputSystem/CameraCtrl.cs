//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/CameraCtrl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if ENABLE_INPUT_SYSTEM
using System;
using System.Collections;
using System.Collections.Generic;


using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;



public partial class @CameraCtrl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraCtrl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraCtrl"",
    ""maps"": [
        {
            ""name"": ""Camera3rdCtrl"",
            ""id"": ""4344e035-0d3f-4a6c-afb4-6f08c9845862"",
            ""actions"": [
                {
                    ""name"": ""Look3rd"",
                    ""type"": ""Value"",
                    ""id"": ""7d2598f7-62f5-4550-8156-1044f66cea51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollScale"",
                    ""type"": ""Value"",
                    ""id"": ""59c831ea-8801-44fd-a22e-939eee3fb8ca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88f08be7-e4b2-4a8b-9840-83b2e9303397"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""Look3rd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c0b855-c898-4f89-9f59-efe1f0ca8f83"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.01,y=0.01)"",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""ScrollScale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera1stCtrl"",
            ""id"": ""a83d8873-cca6-4669-9aea-c8d40eb7ed07"",
            ""actions"": [
                {
                    ""name"": ""Look1st"",
                    ""type"": ""Value"",
                    ""id"": ""7c3e113c-8190-45cc-9d3c-fa40283da23b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1bf0872-db0d-416b-bdec-49c826efa49c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false,invertY=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""Look1st"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraFreeCtrl"",
            ""id"": ""73a38b27-896a-4915-9505-8b11f7c5b158"",
            ""actions"": [
                {
                    ""name"": ""MoveFree"",
                    ""type"": ""Value"",
                    ""id"": ""4db37e15-7eae-4cd5-a8ce-f1d116c3d792"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookFree"",
                    ""type"": ""Value"",
                    ""id"": ""42884db9-496c-4299-8339-342b0d760f4a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpAndDown"",
                    ""type"": ""Button"",
                    ""id"": ""ede20c1f-a4b1-4de4-8c75-5f38af76d5fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e384e656-9cfe-4985-bd1c-fe4d45af626f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.1,y=0.1)"",
                    ""groups"": """",
                    ""action"": ""MoveFree"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ab2972b5-b9be-436f-b3de-3c18b59db4ef"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b505f908-3800-4bca-87e1-72c78bb9e47e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cc0b3e4f-84d2-4282-ba5a-da6c624f4215"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9c81a6f-913f-44bf-b899-7ce1e2ab7ba0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1490f0f3-413a-4e68-9670-9b43a5c36632"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""UpAndDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""451c2808-a649-4a52-8ba9-f326c4799b30"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""UpAndDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1499c1d0-2628-41e5-8cb2-740c605de383"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false,invertY=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""Camera_KeyboardAndMouse"",
                    ""action"": ""LookFree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Camera_KeyboardAndMouse"",
            ""bindingGroup"": ""Camera_KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera3rdCtrl
        m_Camera3rdCtrl = asset.FindActionMap("Camera3rdCtrl", throwIfNotFound: true);
        m_Camera3rdCtrl_Look3rd = m_Camera3rdCtrl.FindAction("Look3rd", throwIfNotFound: true);
        m_Camera3rdCtrl_ScrollScale = m_Camera3rdCtrl.FindAction("ScrollScale", throwIfNotFound: true);
        // Camera1stCtrl
        m_Camera1stCtrl = asset.FindActionMap("Camera1stCtrl", throwIfNotFound: true);
        m_Camera1stCtrl_Look1st = m_Camera1stCtrl.FindAction("Look1st", throwIfNotFound: true);
        // CameraFreeCtrl
        m_CameraFreeCtrl = asset.FindActionMap("CameraFreeCtrl", throwIfNotFound: true);
        m_CameraFreeCtrl_MoveFree = m_CameraFreeCtrl.FindAction("MoveFree", throwIfNotFound: true);
        m_CameraFreeCtrl_LookFree = m_CameraFreeCtrl.FindAction("LookFree", throwIfNotFound: true);
        m_CameraFreeCtrl_UpAndDown = m_CameraFreeCtrl.FindAction("UpAndDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera3rdCtrl
    private readonly InputActionMap m_Camera3rdCtrl;
    private ICamera3rdCtrlActions m_Camera3rdCtrlActionsCallbackInterface;
    private readonly InputAction m_Camera3rdCtrl_Look3rd;
    private readonly InputAction m_Camera3rdCtrl_ScrollScale;
    public struct Camera3rdCtrlActions
    {
        private @CameraCtrl m_Wrapper;
        public Camera3rdCtrlActions(@CameraCtrl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look3rd => m_Wrapper.m_Camera3rdCtrl_Look3rd;
        public InputAction @ScrollScale => m_Wrapper.m_Camera3rdCtrl_ScrollScale;
        public InputActionMap Get() { return m_Wrapper.m_Camera3rdCtrl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera3rdCtrlActions set) { return set.Get(); }
        public void SetCallbacks(ICamera3rdCtrlActions instance)
        {
            if (m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface != null)
            {
                @Look3rd.started -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnLook3rd;
                @Look3rd.performed -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnLook3rd;
                @Look3rd.canceled -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnLook3rd;
                @ScrollScale.started -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnScrollScale;
                @ScrollScale.performed -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnScrollScale;
                @ScrollScale.canceled -= m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface.OnScrollScale;
            }
            m_Wrapper.m_Camera3rdCtrlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look3rd.started += instance.OnLook3rd;
                @Look3rd.performed += instance.OnLook3rd;
                @Look3rd.canceled += instance.OnLook3rd;
                @ScrollScale.started += instance.OnScrollScale;
                @ScrollScale.performed += instance.OnScrollScale;
                @ScrollScale.canceled += instance.OnScrollScale;
            }
        }
    }
    public Camera3rdCtrlActions @Camera3rdCtrl => new Camera3rdCtrlActions(this);

    // Camera1stCtrl
    private readonly InputActionMap m_Camera1stCtrl;
    private ICamera1stCtrlActions m_Camera1stCtrlActionsCallbackInterface;
    private readonly InputAction m_Camera1stCtrl_Look1st;
    public struct Camera1stCtrlActions
    {
        private @CameraCtrl m_Wrapper;
        public Camera1stCtrlActions(@CameraCtrl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look1st => m_Wrapper.m_Camera1stCtrl_Look1st;
        public InputActionMap Get() { return m_Wrapper.m_Camera1stCtrl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera1stCtrlActions set) { return set.Get(); }
        public void SetCallbacks(ICamera1stCtrlActions instance)
        {
            if (m_Wrapper.m_Camera1stCtrlActionsCallbackInterface != null)
            {
                @Look1st.started -= m_Wrapper.m_Camera1stCtrlActionsCallbackInterface.OnLook1st;
                @Look1st.performed -= m_Wrapper.m_Camera1stCtrlActionsCallbackInterface.OnLook1st;
                @Look1st.canceled -= m_Wrapper.m_Camera1stCtrlActionsCallbackInterface.OnLook1st;
            }
            m_Wrapper.m_Camera1stCtrlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look1st.started += instance.OnLook1st;
                @Look1st.performed += instance.OnLook1st;
                @Look1st.canceled += instance.OnLook1st;
            }
        }
    }
    public Camera1stCtrlActions @Camera1stCtrl => new Camera1stCtrlActions(this);

    // CameraFreeCtrl
    private readonly InputActionMap m_CameraFreeCtrl;
    private ICameraFreeCtrlActions m_CameraFreeCtrlActionsCallbackInterface;
    private readonly InputAction m_CameraFreeCtrl_MoveFree;
    private readonly InputAction m_CameraFreeCtrl_LookFree;
    private readonly InputAction m_CameraFreeCtrl_UpAndDown;
    public struct CameraFreeCtrlActions
    {
        private @CameraCtrl m_Wrapper;
        public CameraFreeCtrlActions(@CameraCtrl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveFree => m_Wrapper.m_CameraFreeCtrl_MoveFree;
        public InputAction @LookFree => m_Wrapper.m_CameraFreeCtrl_LookFree;
        public InputAction @UpAndDown => m_Wrapper.m_CameraFreeCtrl_UpAndDown;
        public InputActionMap Get() { return m_Wrapper.m_CameraFreeCtrl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraFreeCtrlActions set) { return set.Get(); }
        public void SetCallbacks(ICameraFreeCtrlActions instance)
        {
            if (m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface != null)
            {
                @MoveFree.started -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnMoveFree;
                @MoveFree.performed -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnMoveFree;
                @MoveFree.canceled -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnMoveFree;
                @LookFree.started -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnLookFree;
                @LookFree.performed -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnLookFree;
                @LookFree.canceled -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnLookFree;
                @UpAndDown.started -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnUpAndDown;
                @UpAndDown.performed -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnUpAndDown;
                @UpAndDown.canceled -= m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface.OnUpAndDown;
            }
            m_Wrapper.m_CameraFreeCtrlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveFree.started += instance.OnMoveFree;
                @MoveFree.performed += instance.OnMoveFree;
                @MoveFree.canceled += instance.OnMoveFree;
                @LookFree.started += instance.OnLookFree;
                @LookFree.performed += instance.OnLookFree;
                @LookFree.canceled += instance.OnLookFree;
                @UpAndDown.started += instance.OnUpAndDown;
                @UpAndDown.performed += instance.OnUpAndDown;
                @UpAndDown.canceled += instance.OnUpAndDown;
            }
        }
    }
    public CameraFreeCtrlActions @CameraFreeCtrl => new CameraFreeCtrlActions(this);
    private int m_Camera_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme Camera_KeyboardAndMouseScheme
    {
        get
        {
            if (m_Camera_KeyboardAndMouseSchemeIndex == -1) m_Camera_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("Camera_KeyboardAndMouse");
            return asset.controlSchemes[m_Camera_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface ICamera3rdCtrlActions
    {
        void OnLook3rd(InputAction.CallbackContext context);
        void OnScrollScale(InputAction.CallbackContext context);
    }
    public interface ICamera1stCtrlActions
    {
        void OnLook1st(InputAction.CallbackContext context);
    }
    public interface ICameraFreeCtrlActions
    {
        void OnMoveFree(InputAction.CallbackContext context);
        void OnLookFree(InputAction.CallbackContext context);
        void OnUpAndDown(InputAction.CallbackContext context);
    }
}
#endif